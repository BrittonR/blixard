syntax = "proto3";

package blixard;

// Service for cluster communication
service ClusterService {
  // Node management
  rpc JoinCluster(JoinRequest) returns (JoinResponse);
  rpc LeaveCluster(LeaveRequest) returns (LeaveResponse);
  rpc GetClusterStatus(ClusterStatusRequest) returns (ClusterStatusResponse);
  
  // VM operations
  rpc CreateVm(CreateVmRequest) returns (CreateVmResponse);
  rpc StartVm(StartVmRequest) returns (StartVmResponse);
  rpc StopVm(StopVmRequest) returns (StopVmResponse);
  rpc ListVms(ListVmsRequest) returns (ListVmsResponse);
  rpc GetVmStatus(GetVmStatusRequest) returns (GetVmStatusResponse);
  
  // Health check
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
}

// Node management messages
message JoinRequest {
  uint64 node_id = 1;
  string bind_address = 2;
}

message JoinResponse {
  bool success = 1;
  string message = 2;
  repeated NodeInfo peers = 3;
}

message LeaveRequest {
  uint64 node_id = 1;
}

message LeaveResponse {
  bool success = 1;
  string message = 2;
}

message ClusterStatusRequest {}

message ClusterStatusResponse {
  uint64 leader_id = 1;
  repeated NodeInfo nodes = 2;
  uint64 term = 3;
}

message NodeInfo {
  uint64 id = 1;
  string address = 2;
  NodeState state = 3;
}

enum NodeState {
  NODE_STATE_UNKNOWN = 0;
  NODE_STATE_FOLLOWER = 1;
  NODE_STATE_CANDIDATE = 2;
  NODE_STATE_LEADER = 3;
}

// VM management messages
message CreateVmRequest {
  string name = 1;
  string config_path = 2;
  uint32 vcpus = 3;
  uint32 memory_mb = 4;
}

message CreateVmResponse {
  bool success = 1;
  string message = 2;
  string vm_id = 3;
}

message StartVmRequest {
  string name = 1;
}

message StartVmResponse {
  bool success = 1;
  string message = 2;
}

message StopVmRequest {
  string name = 1;
}

message StopVmResponse {
  bool success = 1;
  string message = 2;
}

message ListVmsRequest {}

message ListVmsResponse {
  repeated VmInfo vms = 1;
}

message VmInfo {
  string name = 1;
  VmState state = 2;
  uint64 node_id = 3;
  uint32 vcpus = 4;
  uint32 memory_mb = 5;
}

enum VmState {
  VM_STATE_UNKNOWN = 0;
  VM_STATE_CREATED = 1;
  VM_STATE_STARTING = 2;
  VM_STATE_RUNNING = 3;
  VM_STATE_STOPPING = 4;
  VM_STATE_STOPPED = 5;
  VM_STATE_FAILED = 6;
}

message GetVmStatusRequest {
  string name = 1;
}

message GetVmStatusResponse {
  bool found = 1;
  VmInfo vm_info = 2;
}

// Health check
message HealthCheckRequest {}

message HealthCheckResponse {
  bool healthy = 1;
  string message = 2;
}