//! MadSim tests for gRPC server functionality

#![cfg(madsim)]

use std::net::SocketAddr;
use std::sync::Arc;
use std::time::Duration;

use madsim::{runtime::Handle, time::sleep};
use madsim_tonic::transport::Channel;

use blixard_simulation::{
    grpc_server::{proto::*, start_grpc_server},
    node::Node,
    types::NodeConfig,
};

#[madsim::test]
async fn test_grpc_server_startup() {
    let handle = Handle::current();
    
    // Create server node
    let server_addr: SocketAddr = "10.0.0.1:7001".parse().unwrap();
    let server_node = handle.create_node()
        .name("server")
        .ip(server_addr.ip())
        .build();
    
    server_node.spawn(async move {
        // Create node configuration
        let config = NodeConfig {
            id: 1,
            bind_addr: server_addr,
            data_dir: "/tmp/test".to_string(),
            join_addr: None,
            use_tailscale: false,
        };
        
        // Create and initialize node
        let mut node = Node::new(config);
        node.initialize().await.expect("Failed to initialize node");
        node.start().await.expect("Failed to start node");
        
        let node_arc = Arc::new(node);
        
        // Start gRPC server
        start_grpc_server(node_arc, server_addr).await
            .expect("Failed to start gRPC server");
    });
    
    // Give server time to start
    sleep(Duration::from_secs(1)).await;
    
    // Create client node
    let client_addr = "10.0.0.2".parse().unwrap();
    let client_node = handle.create_node()
        .name("client")
        .ip(client_addr)
        .build();
    
    client_node.spawn(async move {
        // Connect to server
        let channel = Channel::from_static("http://10.0.0.1:7001")
            .connect()
            .await
            .expect("Failed to connect to server");
        
        let mut client = cluster_service_client::ClusterServiceClient::new(channel);
        
        // Test health check
        let response = client.health_check(HealthCheckRequest {})
            .await
            .expect("Health check failed");
        
        assert!(response.into_inner().healthy);
    }).await.unwrap();
}

#[madsim::test]
async fn test_vm_operations() {
    let handle = Handle::current();
    
    // Create server node
    let server_addr: SocketAddr = "10.0.0.1:7001".parse().unwrap();
    let server_node = handle.create_node()
        .name("server")
        .ip(server_addr.ip())
        .build();
    
    server_node.spawn(async move {
        let config = NodeConfig {
            id: 1,
            bind_addr: server_addr,
            data_dir: "/tmp/test".to_string(),
            join_addr: None,
            use_tailscale: false,
        };
        
        let mut node = Node::new(config);
        node.initialize().await.unwrap();
        node.start().await.unwrap();
        
        let node_arc = Arc::new(node);
        
        start_grpc_server(node_arc, server_addr).await.unwrap();
    });
    
    sleep(Duration::from_secs(1)).await;
    
    // Create client and test VM operations
    let client_addr = "10.0.0.2".parse().unwrap();
    let client_node = handle.create_node()
        .name("client")
        .ip(client_addr)
        .build();
    
    client_node.spawn(async move {
        let channel = Channel::from_static("http://10.0.0.1:7001")
            .connect()
            .await
            .unwrap();
        
        let mut client = cluster_service_client::ClusterServiceClient::new(channel);
        
        // Create a VM
        let create_response = client.create_vm(CreateVmRequest {
            name: "test-vm".to_string(),
            config_path: "/path/to/config".to_string(),
            vcpus: 2,
            memory_mb: 1024,
        }).await.unwrap();
        
        let response = create_response.into_inner();
        assert!(response.success);
        assert_eq!(response.vm_id, "test-vm");
        
        // List VMs
        let list_response = client.list_vms(ListVmsRequest {})
            .await
            .unwrap();
        
        let vms = list_response.into_inner().vms;
        assert!(vms.is_empty()); // Since VM creation is not implemented yet
        
        // Get VM status
        let status_response = client.get_vm_status(GetVmStatusRequest {
            name: "test-vm".to_string(),
        }).await.unwrap();
        
        assert!(!status_response.into_inner().found); // VM doesn't exist yet
    }).await.unwrap();
}

#[madsim::test]
async fn test_cluster_operations() {
    let handle = Handle::current();
    
    // Create server node
    let server_addr: SocketAddr = "10.0.0.1:7001".parse().unwrap();
    let server_node = handle.create_node()
        .name("server")
        .ip(server_addr.ip())
        .build();
    
    server_node.spawn(async move {
        let config = NodeConfig {
            id: 1,
            bind_addr: server_addr,
            data_dir: "/tmp/test".to_string(),
            join_addr: None,
            use_tailscale: false,
        };
        
        let mut node = Node::new(config);
        node.initialize().await.unwrap();
        node.start().await.unwrap();
        
        let node_arc = Arc::new(node);
        
        start_grpc_server(node_arc, server_addr).await.unwrap();
    });
    
    sleep(Duration::from_secs(1)).await;
    
    // Test cluster status
    let client_addr = "10.0.0.2".parse().unwrap();
    let client_node = handle.create_node()
        .name("client")
        .ip(client_addr)
        .build();
    
    client_node.spawn(async move {
        let channel = Channel::from_static("http://10.0.0.1:7001")
            .connect()
            .await
            .unwrap();
        
        let mut client = cluster_service_client::ClusterServiceClient::new(channel);
        
        // Get cluster status
        let status_response = client.get_cluster_status(ClusterStatusRequest {})
            .await
            .unwrap();
        
        let status = status_response.into_inner();
        assert_eq!(status.nodes.len(), 1);
        assert_eq!(status.nodes[0].id, 1);
        assert_eq!(status.nodes[0].address, "10.0.0.1:7001");
    }).await.unwrap();
}

#[madsim::test]
async fn test_concurrent_clients() {
    let handle = Handle::current();
    
    // Create server
    let server_addr: SocketAddr = "10.0.0.1:7001".parse().unwrap();
    let server_node = handle.create_node()
        .name("server")
        .ip(server_addr.ip())
        .build();
    
    server_node.spawn(async move {
        let config = NodeConfig {
            id: 1,
            bind_addr: server_addr,
            data_dir: "/tmp/test".to_string(),
            join_addr: None,
            use_tailscale: false,
        };
        
        let mut node = Node::new(config);
        node.initialize().await.unwrap();
        node.start().await.unwrap();
        
        let node_arc = Arc::new(node);
        
        start_grpc_server(node_arc, server_addr).await.unwrap();
    });
    
    sleep(Duration::from_secs(1)).await;
    
    // Create multiple concurrent clients
    let mut client_tasks = vec![];
    
    for i in 0..5 {
        let client_addr = format!("10.0.0.{}:0", i + 2).parse().unwrap();
        let client_node = handle.create_node()
            .name(&format!("client{}", i))
            .ip(client_addr)
            .build();
        
        let task = client_node.spawn(async move {
            let channel = Channel::from_static("http://10.0.0.1:7001")
                .connect()
                .await
                .unwrap();
            
            let mut client = cluster_service_client::ClusterServiceClient::new(channel);
            
            // Each client performs multiple operations
            for j in 0..10 {
                // Health check
                let response = client.health_check(HealthCheckRequest {})
                    .await
                    .unwrap();
                assert!(response.into_inner().healthy);
                
                // Create VM
                let vm_name = format!("vm-{}-{}", i, j);
                let response = client.create_vm(CreateVmRequest {
                    name: vm_name.clone(),
                    config_path: "/path/to/config".to_string(),
                    vcpus: 1,
                    memory_mb: 512,
                }).await.unwrap();
                
                assert!(response.into_inner().success);
                
                sleep(Duration::from_millis(10)).await;
            }
        });
        
        client_tasks.push(task);
    }
    
    // Wait for all clients to complete
    for task in client_tasks {
        task.await.unwrap();
    }
}