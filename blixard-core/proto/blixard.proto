syntax = "proto3";

package blixard;

// Service for cluster communication
service ClusterService {
  // Node management
  rpc JoinCluster(JoinRequest) returns (JoinResponse);
  rpc LeaveCluster(LeaveRequest) returns (LeaveResponse);
  rpc GetClusterStatus(ClusterStatusRequest) returns (ClusterStatusResponse);
  
  // Raft communication
  rpc SendRaftMessage(RaftMessageRequest) returns (RaftMessageResponse);
  
  // Task management
  rpc SubmitTask(TaskRequest) returns (TaskResponse);
  rpc GetTaskStatus(TaskStatusRequest) returns (TaskStatusResponse);
  
  // VM operations
  rpc CreateVm(CreateVmRequest) returns (CreateVmResponse);
  rpc CreateVmWithScheduling(CreateVmWithSchedulingRequest) returns (CreateVmWithSchedulingResponse);
  rpc StartVm(StartVmRequest) returns (StartVmResponse);
  rpc StopVm(StopVmRequest) returns (StopVmResponse);
  rpc DeleteVm(DeleteVmRequest) returns (DeleteVmResponse);
  rpc ListVms(ListVmsRequest) returns (ListVmsResponse);
  rpc GetVmStatus(GetVmStatusRequest) returns (GetVmStatusResponse);
  
  // VM scheduling operations
  rpc ScheduleVmPlacement(ScheduleVmPlacementRequest) returns (ScheduleVmPlacementResponse);
  rpc GetClusterResourceSummary(ClusterResourceSummaryRequest) returns (ClusterResourceSummaryResponse);
  
  // Health check
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
}

// Main Blixard service
service BlixardService {
  // Raft status
  rpc GetRaftStatus(GetRaftStatusRequest) returns (GetRaftStatusResponse);
  
  // Task proposals
  rpc ProposeTask(ProposeTaskRequest) returns (ProposeTaskResponse);
}

// Node management messages
message JoinRequest {
  uint64 node_id = 1;
  string bind_address = 2;
}

message JoinResponse {
  bool success = 1;
  string message = 2;
  repeated NodeInfo peers = 3;
  repeated uint64 voters = 4;  // Current voting members
}

message LeaveRequest {
  uint64 node_id = 1;
}

message LeaveResponse {
  bool success = 1;
  string message = 2;
}

message ClusterStatusRequest {}

message ClusterStatusResponse {
  uint64 leader_id = 1;
  repeated NodeInfo nodes = 2;
  uint64 term = 3;
}

message NodeInfo {
  uint64 id = 1;
  string address = 2;
  NodeState state = 3;
}

enum NodeState {
  NODE_STATE_UNKNOWN = 0;
  NODE_STATE_FOLLOWER = 1;
  NODE_STATE_CANDIDATE = 2;
  NODE_STATE_LEADER = 3;
}

// VM management messages
message CreateVmRequest {
  string name = 1;
  string config_path = 2;
  uint32 vcpus = 3;
  uint32 memory_mb = 4;
}

message CreateVmResponse {
  bool success = 1;
  string message = 2;
  string vm_id = 3;
}

message StartVmRequest {
  string name = 1;
}

message StartVmResponse {
  bool success = 1;
  string message = 2;
}

message StopVmRequest {
  string name = 1;
}

message StopVmResponse {
  bool success = 1;
  string message = 2;
}

message DeleteVmRequest {
  string name = 1;
}

message DeleteVmResponse {
  bool success = 1;
  string message = 2;
}

message ListVmsRequest {}

message ListVmsResponse {
  repeated VmInfo vms = 1;
}

message VmInfo {
  string name = 1;
  VmState state = 2;
  uint64 node_id = 3;
  uint32 vcpus = 4;
  uint32 memory_mb = 5;
  string ip_address = 6; // VM IP address for routed networking
}

enum VmState {
  VM_STATE_UNKNOWN = 0;
  VM_STATE_CREATED = 1;
  VM_STATE_STARTING = 2;
  VM_STATE_RUNNING = 3;
  VM_STATE_STOPPING = 4;
  VM_STATE_STOPPED = 5;
  VM_STATE_FAILED = 6;
}

message GetVmStatusRequest {
  string name = 1;
}

message GetVmStatusResponse {
  bool found = 1;
  VmInfo vm_info = 2;
}

// VM Scheduling messages
message CreateVmWithSchedulingRequest {
  string name = 1;
  string config_path = 2;
  uint32 vcpus = 3;
  uint32 memory_mb = 4;
  PlacementStrategy strategy = 5;
}

message CreateVmWithSchedulingResponse {
  bool success = 1;
  string message = 2;
  string vm_id = 3;
  uint64 selected_node_id = 4;
  string placement_reason = 5;
  repeated uint64 alternative_nodes = 6;
}

message ScheduleVmPlacementRequest {
  string name = 1;
  string config_path = 2;
  uint32 vcpus = 3;
  uint32 memory_mb = 4;
  PlacementStrategy strategy = 5;
}

message ScheduleVmPlacementResponse {
  bool success = 1;
  string message = 2;
  uint64 selected_node_id = 3;
  string placement_reason = 4;
  repeated uint64 alternative_nodes = 5;
}

message ClusterResourceSummaryRequest {}

message ClusterResourceSummaryResponse {
  bool success = 1;
  string message = 2;
  ClusterResourceSummary summary = 3;
}

enum PlacementStrategy {
  PLACEMENT_STRATEGY_MOST_AVAILABLE = 0;
  PLACEMENT_STRATEGY_LEAST_AVAILABLE = 1;
  PLACEMENT_STRATEGY_ROUND_ROBIN = 2;
  PLACEMENT_STRATEGY_MANUAL = 3;
}

message ClusterResourceSummary {
  uint32 total_nodes = 1;
  uint32 total_vcpus = 2;
  uint32 used_vcpus = 3;
  uint64 total_memory_mb = 4;
  uint64 used_memory_mb = 5;
  uint64 total_disk_gb = 6;
  uint64 used_disk_gb = 7;
  uint32 total_running_vms = 8;
  repeated NodeResourceUsage nodes = 9;
}

message NodeResourceUsage {
  uint64 node_id = 1;
  WorkerCapabilities capabilities = 2;
  uint32 used_vcpus = 3;
  uint64 used_memory_mb = 4;
  uint64 used_disk_gb = 5;
  uint32 running_vms = 6;
}

message WorkerCapabilities {
  uint32 cpu_cores = 1;
  uint64 memory_mb = 2;
  uint64 disk_gb = 3;
  repeated string features = 4;
}

// Health check
message HealthCheckRequest {}

message HealthCheckResponse {
  bool healthy = 1;
  string message = 2;
}

// Raft messages
message RaftMessageRequest {
  bytes raft_data = 1; // Serialized raft::prelude::Message
}

message RaftMessageResponse {
  bool success = 1;
  string error = 2;
}

// Task management messages
message TaskRequest {
  string task_id = 1;
  string command = 2;
  repeated string args = 3;
  uint32 cpu_cores = 4;
  uint64 memory_mb = 5;
  uint64 disk_gb = 6;
  repeated string required_features = 7;
  uint64 timeout_secs = 8;
}

message TaskResponse {
  bool accepted = 1;
  string message = 2;
  uint64 assigned_node = 3;
}

message TaskStatusRequest {
  string task_id = 1;
}

message TaskStatusResponse {
  bool found = 1;
  TaskStatus status = 2;
  string output = 3;
  string error = 4;
  uint64 execution_time_ms = 5;
}

enum TaskStatus {
  TASK_STATUS_UNKNOWN = 0;
  TASK_STATUS_PENDING = 1;
  TASK_STATUS_RUNNING = 2;
  TASK_STATUS_COMPLETED = 3;
  TASK_STATUS_FAILED = 4;
}

// Raft status messages
message GetRaftStatusRequest {}

message GetRaftStatusResponse {
  bool is_leader = 1;
  uint64 node_id = 2;
  uint64 leader_id = 3;
  uint64 term = 4;
  string state = 5;
}

// Task proposal messages
message ProposeTaskRequest {
  Task task = 1;
}

message ProposeTaskResponse {
  bool success = 1;
  string message = 2;
}

message Task {
  string id = 1;
  string command = 2;
  repeated string args = 3;
  uint32 cpu_cores = 4;
  uint64 memory_mb = 5;
}