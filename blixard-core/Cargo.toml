[package]
name = "blixard-core"
version = "0.1.0"
edition = "2021"
rust-version = "1.75"
description = "Distributed consensus and state management for Blixard"
authors = ["Blixard Contributors"]

[[example]]
name = "test_vm_scheduler"
path = "examples/test_vm_scheduler.rs"

[dependencies]
# Local crates
# NOTE: blixard-vm cannot be a dependency here due to circular dependency
# The main binary must register VM backends

# Consensus
raft = { version = "0.7", default-features = false, features = ["prost-codec"] }
raft-proto = { version = "0.7", default-features = false, features = ["prost-codec"] }
protobuf = "2.28"

# Storage
redb = "2.0"
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
serde_yaml = "0.9"
bincode = "1.3"

# Async runtime (configured conditionally below)
futures = "0.3"
async-trait = "0.1"

# Error handling
thiserror = "1.0"
anyhow = "1.0"

# Logging
tracing = "0.1"
tracing-subscriber = { version = "0.3", features = ["env-filter"] }
slog = "2.7"
slog-term = "2.9"
slog-async = "2.8"

# Metrics and Observability
opentelemetry = { version = "0.20", features = ["metrics", "trace"] }
opentelemetry_sdk = { version = "0.20", features = ["rt-tokio", "metrics", "trace"] }
opentelemetry-otlp = { version = "0.13", features = ["metrics", "trace"] }
opentelemetry-prometheus = "0.13"
prometheus = "0.13"
tracing-opentelemetry = "0.20"

# Networking
hyper = { version = "0.14", features = ["server", "http1", "tcp"] }
reqwest = { version = "0.11", features = ["json"] }

# Utilities
uuid = { version = "1.6", features = ["v4", "serde"] }
ipnet = { version = "2.9", features = ["serde"] }
rand = "0.8"
rand_chacha = "0.3"
chrono = { version = "0.4", features = ["serde"] }
tempfile = "3.8"
bytes = "1.5"
parking_lot = "0.12"
once_cell = "1.19"
lazy_static = "1.4"
paste = "1.0"
http = "0.2"
http-body = "0.4"
scopeguard = "1.2"
num_cpus = "1.16"
static_assertions = "1.1"
dashmap = "6.1"

# Configuration
toml = "0.8"
humantime-serde = "1.1"
notify = "6.1"

# Security
aes-gcm = "0.10"
sha2 = "0.10"
hex = "0.4"
rcgen = { version = "0.11", features = ["pem"] }
time = "0.3"
hmac = "0.12"
x509-parser = "0.16"
pem = "3.0"

# Cedar Policy Engine
cedar-policy = "3.0"
cedar-policy-core = "3.0"
cedar-policy-validator = "3.0"

# VM management dependencies  
tera = "1.19"

# P2P networking
iroh = "0.90"
iroh-blobs = "0.90"
iroh-docs = { git = "https://github.com/n0-computer/iroh-docs", rev = "01f21e4100015d9e37e0e66856e3d4c82afbbc9e" }
iroh-gossip = { git = "https://github.com/n0-computer/iroh-gossip", branch = "main" }

# Compression
flate2 = "1.0"
zstd = "0.13"

# Hashing
md5 = "0.7"
blake3 = "1.5"

# Encoding
base64 = "0.21"

# Discovery dependencies
trust-dns-resolver = "0.23"
mdns-sd = "0.11"

fail = { version = "0.5", optional = true }

# Conditional dependencies based on madsim cfg
[target.'cfg(not(madsim))'.dependencies]
tokio = { version = "1.35", features = ["full"] }
tokio-stream = { version = "0.1", features = ["net"] }

[target.'cfg(madsim)'.dependencies]
tokio = { version = "0.2", package = "madsim-tokio", features = ["rt", "rt-multi-thread", "sync", "macros", "time", "signal"] }
tokio-stream = "0.1"

[dev-dependencies]
# MicroVM backend for integration tests
blixard-vm = { path = "../blixard-vm" }

proptest-derive = "0.4"
uuid = { version = "1.11", features = ["v4"] }
glob = "0.3"

# Property-based testing
proptest = "1.4"
test-case = "3.3"
rstest = "0.18"
quickcheck = "1.0"
arbitrary = { version = "1.3", features = ["derive"] }

# Fault injection
fail = { version = "0.5", features = ["failpoints"] }

# Model checking
stateright = "0.30"

# Test utilities
tempfile = "3.8"
criterion = "0.5"
pretty_assertions = "1.4"
insta = "1.34"
tracing-test = "0.2"
serial_test = "3.0"
assert_cmd = "2.0"
predicates = "3.0"
tokio-test = "0.4"

# Network simulation
pnet = "0.34"
pcap = "1.1"

[build-dependencies]

[features]
default = []
failpoints = ["fail/failpoints"]
test-helpers = []
vopr = ["test-helpers"]
# microvm-backend feature removed - backends must be registered by main binary

[[bench]]
name = "raft_transport_bench"
harness = false

[[example]]
name = "discovery_demo"
required-features = []
