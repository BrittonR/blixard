[package]
name = "blixard-core"
version = "0.1.0"
edition = "2021"
rust-version = "1.75"
description = "Distributed consensus and state management for Blixard"
authors = ["Blixard Contributors"]

[[example]]
name = "test_vm_scheduler"
path = "examples/test_vm_scheduler.rs"

[dependencies]
# Local crates
# NOTE: blixard-vm cannot be a dependency here due to circular dependency
# The main binary must register VM backends

# Consensus
raft = { workspace = true }
raft-proto = { workspace = true }
protobuf = "2.28"

# Storage
redb = { workspace = true }
serde = { workspace = true }
serde_json = { workspace = true }
serde_yaml = { workspace = true }
bincode = { workspace = true }

# Async runtime (configured conditionally below)
futures = { workspace = true }
async-trait = { workspace = true }

# Error handling
thiserror = { workspace = true }
anyhow = { workspace = true }

# Logging
tracing = { workspace = true }
tracing-subscriber = { workspace = true }
slog = "2.7"
slog-term = "2.9"
slog-async = "2.8"

# Metrics and Observability (now optional)
opentelemetry = { workspace = true, optional = true }
opentelemetry_sdk = { workspace = true, optional = true }
opentelemetry-otlp = { workspace = true, optional = true }
opentelemetry-prometheus = { workspace = true, optional = true }
prometheus = { workspace = true, optional = true }
tracing-opentelemetry = { workspace = true, optional = true }

# Networking - updated to latest versions
hyper = { workspace = true }
reqwest = { workspace = true }

# Utilities
uuid = { workspace = true }
ipnet = { workspace = true }
rand = { workspace = true }
rand_chacha = { workspace = true }
chrono = { workspace = true }
tempfile = { workspace = true }
bytes = { workspace = true }
parking_lot = { workspace = true }
once_cell = { workspace = true }
lazy_static = { workspace = true }
paste = { workspace = true }
http = { workspace = true }
http-body = { workspace = true }
scopeguard = { workspace = true }
num_cpus = { workspace = true }
static_assertions = { workspace = true }
dashmap = { workspace = true }

# Configuration
toml = { workspace = true }
humantime-serde = { workspace = true }
notify = { workspace = true }

# Security
aes-gcm = { workspace = true }
sha2 = { workspace = true }
hex = { workspace = true }
rcgen = { workspace = true }
time = { workspace = true }
hmac = { workspace = true }
x509-parser = { workspace = true }
pem = { workspace = true }

# Cedar Policy Engine
cedar-policy = { workspace = true }
cedar-policy-core = { workspace = true }
cedar-policy-validator = { workspace = true }

# VM management dependencies  
tera = { workspace = true }

# P2P networking
iroh = { workspace = true }
iroh-blobs = { workspace = true }
iroh-docs = { git = "https://github.com/n0-computer/iroh-docs", rev = "01f21e4100015d9e37e0e66856e3d4c82afbbc9e" }
iroh-gossip = { git = "https://github.com/n0-computer/iroh-gossip", branch = "main" }

# Compression
flate2 = { workspace = true }
zstd = { workspace = true }

# Hashing
md5 = { workspace = true }
blake3 = { workspace = true }

# Encoding
base64 = { workspace = true }

# Discovery dependencies
trust-dns-resolver = { workspace = true }
mdns-sd = { workspace = true }

# Network simulation (optional)
pnet = { workspace = true, optional = true }
pcap = { workspace = true, optional = true }

fail = { workspace = true, optional = true }

# Conditional dependencies based on madsim cfg
[target.'cfg(not(madsim))'.dependencies]
tokio = { workspace = true }
tokio-stream = { workspace = true }

[target.'cfg(madsim)'.dependencies]
tokio = { version = "0.2", package = "madsim-tokio", features = ["rt", "rt-multi-thread", "sync", "macros", "time", "signal"] }
tokio-stream = "0.1"

[dev-dependencies]
# MicroVM backend for integration tests
blixard-vm = { path = "../blixard-vm" }

proptest-derive = { workspace = true }
uuid = { workspace = true }
glob = { workspace = true }

# Property-based testing
proptest = { workspace = true }
test-case = { workspace = true }
rstest = { workspace = true }
quickcheck = { workspace = true }
arbitrary = { workspace = true }

# Fault injection
fail = { workspace = true, features = ["failpoints"] }

# Model checking
stateright = { workspace = true }

# Test utilities
tempfile = { workspace = true }
criterion = { workspace = true }
pretty_assertions = { workspace = true }
insta = { workspace = true }
tracing-test = { workspace = true }
serial_test = { workspace = true }
assert_cmd = { workspace = true }
predicates = { workspace = true }
tokio-test = { workspace = true }

# Network simulation (also needed for tests)
pnet = { workspace = true }
pcap = { workspace = true }

[build-dependencies]

[features]
default = ["observability"]
observability = [
    "opentelemetry",
    "opentelemetry_sdk", 
    "opentelemetry-otlp",
    "opentelemetry-prometheus",
    "prometheus",
    "tracing-opentelemetry"
]
simulation = [
    "pnet",
    "pcap"
]
failpoints = ["fail"]
test-helpers = []
vopr = ["test-helpers"]
# microvm-backend feature removed - backends must be registered by main binary

[[bench]]
name = "raft_transport_bench"
harness = false

[[example]]
name = "discovery_demo"
required-features = []
